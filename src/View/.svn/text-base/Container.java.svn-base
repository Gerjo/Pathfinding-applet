/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Container.java
 *
 * Created on Mar 20, 2011, 1:32:59 PM
 */

package View;

import Main.PathFindingApplet;
import Tile.Tile;
import Tile.TileState;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Gerjo Meier
 */
public class Container extends javax.swing.JDesktopPane {
    public static Container instance;

    /** Creates new form Container */
    public Container() {
        initComponents();
        repaint();

        instance = this;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        Tile[][] tiles = PathFindingApplet.INSTANCE.getTiles();
        for(int x = 0; x < tiles.length; ++x) {
            for(int y = 0; y < tiles[x].length; ++y) {
                tiles[x][y].drawObject(g);
            }
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        settingsWindow1 = new View.SettingsWindow();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("jMenu3");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("jMenu4");
        jMenuBar1.add(jMenu4);

        setBackground(new java.awt.Color(102, 102, 102));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        settingsWindow1.setVisible(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(settingsWindow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(335, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(settingsWindow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(283, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        Dimension tileSize = PathFindingApplet.INSTANCE.getTiles()[0][0].size;

        try {
            Point pos = new Point((int)Math.floor(evt.getPoint().x / tileSize.width), (int)Math.floor(evt.getPoint().y / tileSize.height));

            switch(PathFindingApplet.INSTANCE.getTiles()[pos.x][pos.y].state) {
                case WALKABLE:
                case TESTING:
                case PATH:
                case ERROR:
                    if(!((evt.getModifiers() & evt.BUTTON3_MASK) == evt.BUTTON3_MASK)) {
                        PathFindingApplet.INSTANCE.getTiles()[pos.x][pos.y].state = TileState.NONWALKABLE;
                    }
                    break;
                case NONWALKABLE:
                    if((evt.getModifiers() & evt.BUTTON3_MASK) == evt.BUTTON3_MASK) {
                        PathFindingApplet.INSTANCE.getTiles()[pos.x][pos.y].state = TileState.WALKABLE;
                    }
                    break;
            }

            repaint();
        } catch(Exception e) {
            
        }

        //System.out.println("" + evt.getPoint());
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        formMousePressed(evt);
    }//GEN-LAST:event_formMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private View.SettingsWindow settingsWindow1;
    // End of variables declaration//GEN-END:variables

}
